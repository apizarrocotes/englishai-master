// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users and Authentication
model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String
  password         String?  // Optional for OAuth users
  avatarUrl        String?  @map("avatar_url")
  provider         String   @default("email") // 'email', 'google', 'microsoft', 'apple'
  providerId       String?  @map("provider_id") // Optional for email users
  subscriptionTier String   @default("free") @map("subscription_tier")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  learningProfile       LearningProfile?
  conversationSessions  ConversationSession[]
  userProgress          UserProgress[]
  learningAnalytics     LearningAnalytics[]
  teacherPreferences    UserTeacherPreferences?
  customTeacherProfiles TeacherProfile[]
  sessionAnalytics      UserSessionAnalytics[]

  @@map("users")
}

// Learning Profiles
model LearningProfile {
  id                String   @id @default(cuid())
  userId            String   @unique @map("user_id")
  currentLevel      String   @map("current_level")
  targetLevel       String?  @map("target_level")
  learningGoals     String[] @map("learning_goals")
  nativeLanguage    String   @default("es") @map("native_language")
  weeklyGoalMinutes Int      @default(300) @map("weekly_goal_minutes")
  preferredSchedule Json     @map("preferred_schedule")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("learning_profiles")
}

// Learning Paths and Content
model LearningPath {
  id             String   @id @default(cuid())
  name           String
  description    String?
  levelRange     String   @map("level_range")
  category       String
  totalLessons   Int      @map("total_lessons")
  estimatedHours Int      @map("estimated_hours")
  isActive       Boolean  @default(true) @map("is_active")

  // Relations
  lessons Lesson[]

  @@map("learning_paths")
}

model Lesson {
  id                 String   @id @default(cuid())
  pathId             String   @map("path_id")
  orderIndex         Int      @map("order_index")
  title              String
  description        String?
  scenarioType       String   @map("scenario_type")
  learningObjectives String[] @map("learning_objectives")
  vocabulary         Json
  grammarFocus       String[] @map("grammar_focus")
  difficultyLevel    Int      @default(1) @map("difficulty_level")
  estimatedDuration  Int      @map("estimated_duration") // in minutes

  // Relations
  path                   LearningPath          @relation(fields: [pathId], references: [id])
  conversationScenarios ConversationScenario[]
  userProgress           UserProgress[]

  @@map("lessons")
}

// Conversation System
model ConversationScenario {
  id              String   @id @default(cuid())
  lessonId        String?  @map("lesson_id")
  name            String
  context         String
  aiPersona       Json     @map("ai_persona")
  successCriteria Json     @map("success_criteria")
  maxDuration     Int      @default(1800) @map("max_duration") // 30 minutes in seconds

  // Relations
  lesson              Lesson?               @relation(fields: [lessonId], references: [id])
  conversationSessions ConversationSession[]

  @@map("conversation_scenarios")
}

model ConversationSession {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  scenarioId    String   @map("scenario_id")
  status        String   @default("active")
  durationSeconds Int    @default(0) @map("duration_seconds")
  messagesCount Int      @default(0) @map("messages_count")
  score         Json?
  feedback      String?
  startedAt     DateTime @default(now()) @map("started_at")
  completedAt   DateTime? @map("completed_at")

  // Relations
  user     User                     @relation(fields: [userId], references: [id])
  scenario ConversationScenario     @relation(fields: [scenarioId], references: [id])
  messages ConversationMessage[]

  @@map("conversation_sessions")
}

model ConversationMessage {
  id          String   @id @default(cuid())
  sessionId   String   @map("session_id")
  sender      String   // 'user' or 'ai'
  content     String
  audioUrl    String?  @map("audio_url")
  corrections Json?
  timestamp   DateTime @default(now())

  // Relations
  session ConversationSession @relation(fields: [sessionId], references: [id])

  @@map("conversation_messages")
}

// Progress and Analytics
model UserProgress {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  lessonId    String    @map("lesson_id")
  status      String    @default("not_started")
  score       Int?
  timeSpent   Int       @default(0) @map("time_spent") // in seconds
  attempts    Int       @default(0)
  completedAt DateTime? @map("completed_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
  @@map("user_progress")
}

model LearningAnalytics {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  date              DateTime
  minutesPracticed  Int      @default(0) @map("minutes_practiced")
  lessonsCompleted  Int      @default(0) @map("lessons_completed")
  conversationsCount Int     @default(0) @map("conversations_count")
  averageScore      Decimal? @map("average_score") @db.Decimal(3, 1)
  strengths         String[]
  weaknesses        String[]

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@map("learning_analytics")
}

// AI Teacher Profiles System
model TeacherProfile {
  id                    String   @id @default(cuid())
  userId                String?  @map("user_id") // null for system profiles
  isSystemProfile       Boolean  @default(false) @map("is_system_profile")
  name                  String
  description           String
  
  // Personality Configuration
  personalityName       String   @map("personality_name")
  personalityTitle      String   @map("personality_title")
  personalityBackground String   @map("personality_background")
  personalitySpecialties String[] @map("personality_specialties")
  personalityCatchPhrases String[] @map("personality_catch_phrases")
  personalityMotivationalStyle String @map("personality_motivational_style")
  personalityAvatarUrl  String   @map("personality_avatar_url")
  personalityBannerColor String  @map("personality_banner_color")
  
  // Voice Configuration
  voiceModel            String   @default("nova") @map("voice_model") // alloy, echo, fable, onyx, nova, shimmer
  voiceSpeed            Decimal  @default(1.0) @map("voice_speed") @db.Decimal(3, 2)
  voiceAccent           String   @default("american") @map("voice_accent")
  
  // Teaching Style
  teachingPersonality   String   @default("friendly") @map("teaching_personality")
  teachingFormality     String   @default("professional") @map("teaching_formality")
  teachingCorrectionStyle String @default("immediate") @map("teaching_correction_style")
  teachingEncouragementLevel String @default("moderate") @map("teaching_encouragement_level")
  teachingAdaptability  Int      @default(7) @map("teaching_adaptability")
  
  // Teaching Focus
  teachingPrimaryFocus  String   @default("conversation") @map("teaching_primary_focus")
  teachingSecondaryFocus String? @map("teaching_secondary_focus")
  teachingDetailLevel   String   @default("intermediate") @map("teaching_detail_level")
  teachingMethodology   String   @default("communicative") @map("teaching_methodology")
  
  // System Configuration
  systemPromptTemplate  String   @map("system_prompt_template")
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  // Relations
  creator             User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userPreferences     UserTeacherPreferences[]
  
  @@map("teacher_profiles")
}

model UserTeacherPreferences {
  id                String   @id @default(cuid())
  userId            String   @unique @map("user_id")
  selectedProfileId String   @map("selected_profile_id")
  customizations    Json?    // Store any user-specific customizations
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  selectedProfile TeacherProfile @relation(fields: [selectedProfileId], references: [id])
  
  @@map("user_teacher_preferences")
}

// Platform Analytics Models
model PlatformAnalytics {
  id              String   @id @default(cuid())
  date            DateTime @db.Date
  dailyActiveUsers Int     @default(0) @map("daily_active_users")
  monthlyActiveUsers Int   @default(0) @map("monthly_active_users")
  totalSessions   Int      @default(0) @map("total_sessions")
  totalRevenue    Decimal  @default(0) @db.Decimal(10, 2) @map("total_revenue")
  avgSessionLength Decimal @default(0) @db.Decimal(8, 2) @map("avg_session_length")
  newUsers        Int      @default(0) @map("new_users")
  returningUsers  Int      @default(0) @map("returning_users")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@unique([date])
  @@map("platform_analytics")
}

model FeatureUsageAnalytics {
  id           String   @id @default(cuid())
  date         DateTime @db.Date
  feature      String   // 'voice_conversations', 'text_chat', 'lesson_practice'
  usageCount   Int      @default(0) @map("usage_count")
  uniqueUsers  Int      @default(0) @map("unique_users")
  totalTime    Int      @default(0) @map("total_time") // in seconds
  avgTimePerUse Decimal @default(0) @db.Decimal(8, 2) @map("avg_time_per_use")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([date, feature])
  @@map("feature_usage_analytics")
}

model GeographicAnalytics {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  country     String
  countryCode String   @map("country_code")
  users       Int      @default(0)
  sessions    Int      @default(0)
  totalTime   Int      @default(0) @map("total_time") // in seconds
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([date, countryCode])
  @@map("geographic_analytics")
}

model DeviceAnalytics {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  deviceType String  @map("device_type") // 'desktop', 'mobile', 'tablet'
  browser   String   // 'chrome', 'firefox', 'safari', 'edge', 'other'
  os        String   // 'windows', 'macos', 'linux', 'ios', 'android'
  users     Int      @default(0)
  sessions  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([date, deviceType, browser, os])
  @@map("device_analytics")
}

model PerformanceAnalytics {
  id               String   @id @default(cuid())
  date             DateTime @db.Date
  avgResponseTime  Decimal  @default(0) @db.Decimal(8, 2) @map("avg_response_time") // in milliseconds
  p95ResponseTime  Decimal  @default(0) @db.Decimal(8, 2) @map("p95_response_time")
  p99ResponseTime  Decimal  @default(0) @db.Decimal(8, 2) @map("p99_response_time")
  errorRate        Decimal  @default(0) @db.Decimal(5, 4) @map("error_rate") // percentage
  errorCount       Int      @default(0) @map("error_count")
  uptimePercentage Decimal  @default(100) @db.Decimal(5, 2) @map("uptime_percentage")
  incidentCount    Int      @default(0) @map("incident_count")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@unique([date])
  @@map("performance_analytics")
}

model UserSessionAnalytics {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  sessionId   String   @unique @map("session_id")
  startTime   DateTime @map("start_time")
  endTime     DateTime? @map("end_time")
  duration    Int?     // in seconds
  pageViews   Int      @default(0) @map("page_views")
  interactions Int     @default(0)
  deviceType  String   @map("device_type")
  browser     String
  os          String
  country     String?
  countryCode String?  @map("country_code")
  ipAddress   String   @map("ip_address")
  userAgent   String   @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_session_analytics")
}

// Indexes for performance
// User indexes
// @@index([email])

// Conversation indexes
// @@index([userId]) on ConversationSession
// @@index([sessionId]) on ConversationMessage

// Progress indexes  
// @@index([userId]) on UserProgress
// @@index([userId, date]) on LearningAnalytics

// Analytics indexes
// @@index([date]) on PlatformAnalytics
// @@index([date, feature]) on FeatureUsageAnalytics
// @@index([date, countryCode]) on GeographicAnalytics
// @@index([date, deviceType]) on DeviceAnalytics
// @@index([userId, startTime]) on UserSessionAnalytics